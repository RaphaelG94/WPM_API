// <auto-generated />
using System;
using WPM_API.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WPM_API.Data.ProjectMigration.Migrations
{
    [DbContext(typeof(DBData))]
    [Migration("20200902093324_209_AddCustomerImage")]
    partial class _209_AddCustomerImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bitstream.Data.DataContext.AssetClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_AssetClass");

                    b.Property<string>("AssetTypeId");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Name");

                    b.Property<bool>("fromAdmin");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AssetClass");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ActivityLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ActivityLog");

                    b.Property<string>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Message");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AdvancedProperty", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_AdvancedProperty");

                    b.Property<string>("BaseId");

                    b.Property<string>("CategoryId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.Property<bool>("isEditable");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AdvancedProperty");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Architecture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Architecture");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("RuleId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("Architecture");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AssetMgmt.AssetModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_AssetModel");

                    b.Property<string>("AssetClassId");

                    b.Property<string>("AssetID");

                    b.Property<string>("AssetStatus");

                    b.Property<string>("AssetTypeId");

                    b.Property<string>("Building");

                    b.Property<string>("CINumber");

                    b.Property<string>("ClientId");

                    b.Property<string>("Coordinates");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DepreciationMonths");

                    b.Property<string>("Description");

                    b.Property<string>("Floor");

                    b.Property<string>("InvoiceId");

                    b.Property<string>("LocationId");

                    b.Property<string>("PersonId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("PurchaseValue");

                    b.Property<string>("Room");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VendorModelId");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("VendorModelId");

                    b.ToTable("AssetModel");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AssetType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_AssetType");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Name");

                    b.Property<bool>("fromAdmin");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Attachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Attachment");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("FileSize");

                    b.Property<string>("GenFileName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AzureBlobStorage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_AzureBlob");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("RessourceGroupId");

                    b.Property<string>("StorageAccountId");

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RessourceGroupId");

                    b.HasIndex("StorageAccountId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("AzureBlobStorage");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.BIOSModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_HardwareModel");

                    b.Property<string>("ContentId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("ReadMeId");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("ValidOS");

                    b.Property<string>("Vendor");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ReadMeId");

                    b.ToTable("BIOSModel");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Base", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Base");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CredentialsId");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("ResourceGroupId");

                    b.Property<string>("Status");

                    b.Property<string>("StorageAccountId");

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VirtualNetworkId");

                    b.Property<string>("VpnId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ResourceGroupId");

                    b.HasIndex("StorageAccountId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("VirtualNetworkId");

                    b.HasIndex("VpnId");

                    b.ToTable("Base");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Bios", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_BiosId");

                    b.Property<string>("BiosSettingsId");

                    b.Property<string>("InstalledVersion");

                    b.Property<string>("InternalVersion");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("ManufacturerVersion");

                    b.HasKey("Id");

                    b.HasIndex("BiosSettingsId");

                    b.ToTable("Bios");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.BiosSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_BiosSettingsId");

                    b.HasKey("Id");

                    b.ToTable("BiosSettings");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Category");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Certification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Certification");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ChangeLog");

                    b.Property<DateTime>("DateChanged");

                    b.Property<string>("EntityName");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<string>("PrimaryKeyValue");

                    b.Property<string>("PropertyName");

                    b.HasKey("Id");

                    b.ToTable("ChangeLog");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Client");

                    b.Property<string>("AssetId");

                    b.Property<string>("AssetModelId");

                    b.Property<string>("BaseId");

                    b.Property<string>("BiosId");

                    b.Property<string>("CloudFlag");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("HardwareId");

                    b.Property<string>("InstallationDate");

                    b.Property<string>("InventoryId");

                    b.Property<string>("JoinedDomain");

                    b.Property<DateTime>("LastInventoryUpdate");

                    b.Property<string>("Location");

                    b.Property<string>("MainUser");

                    b.Property<string>("Name");

                    b.Property<string>("NetworkId");

                    b.Property<string>("OrganizationalUnitId");

                    b.Property<string>("OsId");

                    b.Property<string>("Proxy");

                    b.Property<string>("PurchaseId");

                    b.Property<string>("Subnet");

                    b.Property<string>("UUID");

                    b.Property<string>("Unattend");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UsageStatus");

                    b.Property<string>("Vendor");

                    b.Property<string>("WdsIp");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("BiosId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HardwareId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("OrganizationalUnitId");

                    b.HasIndex("OsId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientClientProperty", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientClientProperty");

                    b.Property<string>("ClientId");

                    b.Property<string>("ClientPropertyId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientPropertyId");

                    b.ToTable("ClientClientProperty");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientOption");

                    b.Property<string>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeviceOptionId");

                    b.Property<int>("Order");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeviceOptionId");

                    b.ToTable("ClientOption");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientParameter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientParameter");

                    b.Property<string>("ClientId");

                    b.Property<bool>("IsEditable");

                    b.Property<string>("ParameterName");

                    b.Property<string>("PropertyName");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientParameter");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientProperty", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientProperty");

                    b.Property<string>("CategoryId");

                    b.Property<string>("Command");

                    b.Property<string>("ParameterName");

                    b.Property<string>("PropertyName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ClientProperty");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientSoftware", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientSoftware");

                    b.Property<string>("ClientId");

                    b.Property<string>("CustomerSoftwareId");

                    b.Property<bool?>("Install");

                    b.Property<string>("RunningContext");

                    b.Property<string>("SoftwareId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CustomerSoftwareId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("ClientSoftware");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientTask", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ClientTask");

                    b.Property<string>("ClientId");

                    b.Property<string>("Status");

                    b.Property<string>("TaskId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TaskId");

                    b.ToTable("ClientTask");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CloudEntryPoint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_CloudEntryPoint");

                    b.Property<string>("ClientId");

                    b.Property<string>("ClientSecret");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsStandard");

                    b.Property<string>("Name");

                    b.Property<string>("TenantId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CloudEntryPoint");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Company");

                    b.Property<string>("CorporateName");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ExpertId");

                    b.Property<string>("FormOfOrganization");

                    b.Property<string>("HeadquarterId");

                    b.Property<string>("LinkWebsite");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("HeadquarterId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Customer");

                    b.Property<string>("BannerId");

                    b.Property<string>("Btn1Label");

                    b.Property<string>("Btn2Label");

                    b.Property<string>("Btn3Label");

                    b.Property<string>("Btn4Label");

                    b.Property<string>("CmdBtn1");

                    b.Property<string>("CmdBtn2");

                    b.Property<string>("CmdBtn3");

                    b.Property<string>("CmdBtn4");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CsdpContainer");

                    b.Property<string>("CsdpRoot");

                    b.Property<bool>("Deletable");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<string>("IconLeftId");

                    b.Property<string>("IconRightId");

                    b.Property<DateTime?>("LtSASExpireDate");

                    b.Property<string>("LtSASRead");

                    b.Property<string>("LtSASWríte");

                    b.Property<string>("MainCompanyId");

                    b.Property<string>("Name");

                    b.Property<string>("OpeningTimes");

                    b.Property<string>("Phone");

                    b.Property<string>("SystemhouseId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("IconLeftId");

                    b.HasIndex("IconRightId");

                    b.HasIndex("MainCompanyId");

                    b.HasIndex("SystemhouseId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CustomerSoftware", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_CustomerSoftware");

                    b.Property<string>("Checksum");

                    b.Property<string>("CompliancyRule");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerSoftwareStreamId");

                    b.Property<string>("DedicatedDownloadLink");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("InstallationTime");

                    b.Property<string>("MinimalSoftwareId");

                    b.Property<string>("Name");

                    b.Property<string>("NextSoftwareId");

                    b.Property<string>("PackageSize");

                    b.Property<string>("Prerequisites");

                    b.Property<string>("PrevSoftwareId");

                    b.Property<string>("RuleApplicabilityId");

                    b.Property<string>("RuleDetectionId");

                    b.Property<string>("RunningContext");

                    b.Property<string>("SoftwareId");

                    b.Property<string>("Status");

                    b.Property<string>("TaskInstallId");

                    b.Property<string>("TaskUninstallId");

                    b.Property<string>("TaskUpdateId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VendorReleaseDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CustomerSoftwareStreamId");

                    b.HasIndex("RuleApplicabilityId");

                    b.HasIndex("RuleDetectionId");

                    b.HasIndex("TaskInstallId");

                    b.HasIndex("TaskUninstallId");

                    b.HasIndex("TaskUpdateId");

                    b.ToTable("CustomerSoftware");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CustomerSoftwareStream", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_CustomerSoftwareStream");

                    b.Property<string>("ApplicationOwnerId");

                    b.Property<string>("Architecture");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionShort");

                    b.Property<string>("DownloadLink");

                    b.Property<bool>("GnuLicence");

                    b.Property<string>("IconId");

                    b.Property<bool>("IsEnterpriseStream");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<string>("ReleasePlanId");

                    b.Property<string>("SoftwareStreamId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdateSettings");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Vendor");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOwnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IconId");

                    b.HasIndex("ReleasePlanId");

                    b.ToTable("CustomerSoftwareStream");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.DNS", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_DNS");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DomainId");

                    b.Property<string>("Forwarder");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("DNS");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Default", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Default");

                    b.Property<string>("Category");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Default");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Disk", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Disk");

                    b.Property<int>("DiskType");

                    b.Property<string>("Name");

                    b.Property<int>("SizeInGb");

                    b.Property<string>("VirtualMachineId");

                    b.HasKey("Id");

                    b.HasIndex("VirtualMachineId");

                    b.ToTable("Disk");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Domain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Domain");

                    b.Property<string>("BaseId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DomainUserCSVId");

                    b.Property<string>("ExecutionVMId");

                    b.Property<string>("GpoId");

                    b.Property<string>("Name");

                    b.Property<string>("Office365ConfigurationXMLId");

                    b.Property<string>("Status");

                    b.Property<string>("Tld");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DomainUserCSVId");

                    b.HasIndex("GpoId");

                    b.HasIndex("Office365ConfigurationXMLId");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.DomainRegistrationTemp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_DomainRegistrationTemp");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DomainRegistrationTemp");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.DomainUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_DomainUser");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Displayname");

                    b.Property<string>("DomainId");

                    b.Property<string>("Email");

                    b.Property<string>("MemberOf");

                    b.Property<string>("Name");

                    b.Property<string>("SamAccountName");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserGivenName");

                    b.Property<string>("UserLastName");

                    b.Property<string>("UserPrincipalName");

                    b.Property<string>("Workphone");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("DomainUser");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Driver", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Driver");

                    b.Property<string>("ContentId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeviceName");

                    b.Property<string>("DeviceNameDriverManager");

                    b.Property<string>("DriverName");

                    b.Property<string>("ReadeMeId");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("ValidOS");

                    b.Property<string>("Vendor");

                    b.Property<string>("VendorId");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ReadeMeId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ErrorLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ErrorLog");

                    b.Property<string>("Data");

                    b.Property<string>("Error");

                    b.Property<string>("Source");

                    b.Property<DateTime>("Time");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ExecutionLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ExecutionLog");

                    b.Property<string>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("ExecutionDate");

                    b.Property<string>("Script");

                    b.Property<string>("ScriptVersionId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.Property<string>("VirtualMachineId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ScriptVersionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VirtualMachineId");

                    b.ToTable("ExecutionLog");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_File");

                    b.Property<string>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("ScriptVersionId");

                    b.Property<string>("ShopItemId");

                    b.Property<string>("TaskId");

                    b.Property<string>("VendorModelId");

                    b.HasKey("Id");

                    b.HasIndex("ScriptVersionId");

                    b.HasIndex("ShopItemId");

                    b.HasIndex("TaskId");

                    b.HasIndex("VendorModelId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.GroupPolicyObject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_GPO");

                    b.Property<bool>("BsiCertified");

                    b.Property<string>("LockscreenId");

                    b.Property<string>("Settings");

                    b.Property<string>("WallpaperId");

                    b.HasKey("Id");

                    b.HasIndex("LockscreenId");

                    b.HasIndex("WallpaperId");

                    b.ToTable("GroupPolicyObject");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.HDDPartition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_HDDPartitionId");

                    b.Property<string>("ClientId");

                    b.Property<string>("DriveLetter");

                    b.Property<string>("Overprovisioning");

                    b.Property<string>("PartitionNumber");

                    b.Property<string>("SizeInBytes");

                    b.Property<string>("Type");

                    b.Property<string>("isGpt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("HDDPartition");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Hardware", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_HardwareId");

                    b.Property<string>("ChipSet");

                    b.Property<string>("DisplayResolution");

                    b.Property<string>("HDD");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("ModelNumber");

                    b.Property<string>("Processor");

                    b.Property<string>("RAM");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("ServiceTag");

                    b.Property<string>("TPMChipData");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Hardware");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Image");

                    b.Property<string>("Architecture");

                    b.Property<string>("BuildNr");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DownloadLink");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<bool>("PublishInShop");

                    b.Property<string>("Update");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Vendor");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Inventory");

                    b.Property<string>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("HWInventory");

                    b.Property<string>("Name");

                    b.Property<string>("OSInventory");

                    b.Property<string>("SWInventory");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Location");

                    b.Property<string>("AzureLocation");

                    b.Property<string>("City");

                    b.Property<string>("CityAbbreviation");

                    b.Property<string>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<string>("CountryAbbreviation");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DownloadSpeed");

                    b.Property<string>("Name");

                    b.Property<string>("NameAbbreviation");

                    b.Property<string>("Number");

                    b.Property<string>("Postcode");

                    b.Property<string>("PublicIP");

                    b.Property<string>("Street");

                    b.Property<string>("TimeZone");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UploadSpeed");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.MacAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_MacAddress");

                    b.Property<string>("Address");

                    b.Property<string>("ClientId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MacAddress");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.NetworkConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_NetworkConfigurationId");

                    b.Property<string>("DHCP");

                    b.Property<string>("DNS");

                    b.Property<string>("Gateway");

                    b.Property<string>("IPv4");

                    b.Property<string>("IPv6");

                    b.HasKey("Id");

                    b.ToTable("NetworkConfiguration");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.NotificationEmail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_NotificationEmail");

                    b.Property<int>("AttemptsCount");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("LastAttemptDate");

                    b.Property<string>("LastAttemptError");

                    b.Property<DateTime?>("ProcessedDate");

                    b.Property<string>("SchedulerId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("ToBccEmailAddresses");

                    b.Property<string>("ToCcEmailAddresses");

                    b.Property<string>("ToEmailAddresses")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SchedulerId");

                    b.ToTable("NotificationEmail");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.NotificationEmailAttachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_NotificationEmailAttachment");

                    b.Property<string>("AttachmentId");

                    b.Property<string>("NotificationEmailId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("NotificationEmailId");

                    b.ToTable("NotificationEmailAttachment");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OS", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_OSId");

                    b.Property<string>("KeyboardLayout");

                    b.Property<string>("LanguagePackage");

                    b.Property<string>("OSVersion");

                    b.Property<bool>("Uefi");

                    b.HasKey("Id");

                    b.ToTable("OS");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OSModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_OSModel");

                    b.Property<string>("Architecture");

                    b.Property<string>("ContentId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("OSName");

                    b.Property<string>("OSType");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<DateTime>("SupportEnd");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Vendor");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("OSModel");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Order");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OrderShopItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_OrderShopItem");

                    b.Property<string>("OrderId");

                    b.Property<string>("ShopItemId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("OrderShopItem");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OrganizationalUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_OrganizationalUnit");

                    b.Property<string>("Description");

                    b.Property<string>("DomainId");

                    b.Property<bool>("IsLeaf");

                    b.Property<string>("Name");

                    b.Property<string>("OrganizationalUnitId");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("OrganizationalUnitId");

                    b.ToTable("OrganizationalUnit");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OsVersionName", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_OSVersion");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("RuleId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("OsVersionName");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Parameter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Parameter");

                    b.Property<string>("ClientOptionId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ExecutionLogId");

                    b.Property<bool>("IsEditable");

                    b.Property<string>("Key");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientOptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExecutionLogId");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Person");

                    b.Property<string>("AcademicDegree");

                    b.Property<string>("CompanyId");

                    b.Property<string>("CostCenter");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DepartementName");

                    b.Property<string>("DepartementShort");

                    b.Property<string>("Domain");

                    b.Property<string>("EmailOptional");

                    b.Property<string>("EmailPrimary");

                    b.Property<string>("EmployeeNr");

                    b.Property<string>("EmployeeType");

                    b.Property<string>("FaxNr");

                    b.Property<string>("GivenName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNr");

                    b.Property<string>("PhoneNr");

                    b.Property<string>("RoomNr");

                    b.Property<string>("State");

                    b.Property<string>("Surname");

                    b.Property<string>("Title");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Purchase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_PurchaseId");

                    b.Property<string>("AcquisitionCost");

                    b.Property<string>("CostUnitAssignment");

                    b.Property<string>("DecommissioningDate");

                    b.Property<string>("PurchaseDate");

                    b.Property<string>("Vendor");

                    b.HasKey("Id");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ReleasePlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ReleasePlan");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ReleasePlan");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ResourceGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ResourceGroup");

                    b.Property<string>("AzureSubscriptionId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ResourceGroup");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Rule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Rule");

                    b.Property<bool>("CheckVersionNr");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DataId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("OsType");

                    b.Property<string>("Path");

                    b.Property<bool>("Successon");

                    b.Property<string>("TypeId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VersionNr");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("TypeId");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.RuleType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_RuleType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RuleType");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Scheduler", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Scheduler");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("EndProcessDate");

                    b.Property<string>("EntityData1");

                    b.Property<string>("EntityData2");

                    b.Property<string>("EntityData3");

                    b.Property<string>("EntityData4");

                    b.Property<string>("EntityId1");

                    b.Property<string>("EntityId2");

                    b.Property<string>("EntityId3");

                    b.Property<string>("EntityId4");

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("IsSynchronous");

                    b.Property<DateTime>("OnDate");

                    b.Property<string>("ParentSchedulerId");

                    b.Property<int>("SchedulerActionType");

                    b.Property<DateTime?>("StartProcessDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentSchedulerId");

                    b.ToTable("Scheduler");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Script", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Script");

                    b.Property<int>("AuthorType");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<bool>("showToCustomer");

                    b.HasKey("Id");

                    b.ToTable("Script");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ScriptVersion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ScriptVersion");

                    b.Property<string>("ContentUrl");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<string>("ScriptId");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptVersion");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Server", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DomainId");

                    b.Property<string>("OrganizationalUnitId");

                    b.Property<int>("Type");

                    b.Property<string>("VirtualMachineId");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("OrganizationalUnitId");

                    b.HasIndex("VirtualMachineId");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ServerOrClient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ServerOrClient");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("RuleId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("ServerOrClient");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ShopItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ShopItem");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionShort");

                    b.Property<string>("ManagedServiceLifecyclePrice");

                    b.Property<string>("ManagedServicePrice");

                    b.Property<string>("Name");

                    b.Property<string>("Price");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ShopItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_ShopItemCategory");

                    b.Property<string>("CategoryId");

                    b.Property<string>("ShopItemId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("ShopItemCategory");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SmartDeploy.PreinstalledSoftware", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("InstalledAt");

                    b.Property<string>("Name");

                    b.Property<string>("Size");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PreinstalledSoftware");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Software", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Software");

                    b.Property<string>("Checksum");

                    b.Property<string>("CompliancyRule");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DedicatedDownloadLink");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("InstallationTime");

                    b.Property<string>("MinimalSoftwareId");

                    b.Property<string>("Name");

                    b.Property<string>("NextSoftwareId");

                    b.Property<string>("PackageSize");

                    b.Property<string>("Prerequisites");

                    b.Property<string>("PrevSoftwareId");

                    b.Property<bool>("PublishInShop");

                    b.Property<string>("RuleApplicabilityId");

                    b.Property<string>("RuleDetectionId");

                    b.Property<string>("RunningContext");

                    b.Property<string>("SoftwareStreamId");

                    b.Property<string>("Status");

                    b.Property<string>("TaskInstallId");

                    b.Property<string>("TaskUninstallId");

                    b.Property<string>("TaskUpdateId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VendorReleaseDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RuleApplicabilityId");

                    b.HasIndex("RuleDetectionId");

                    b.HasIndex("SoftwareStreamId");

                    b.HasIndex("TaskInstallId");

                    b.HasIndex("TaskUninstallId");

                    b.HasIndex("TaskUpdateId");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwareStream", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_SoftwareStream");

                    b.Property<string>("Architecture");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionShort");

                    b.Property<string>("DownloadLink");

                    b.Property<bool>("GnuLicence");

                    b.Property<string>("IconId");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<string>("UpdateSettings");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Vendor");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("SoftwareStream");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresClient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_SoftwaresClient");

                    b.Property<string>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("SoftwareId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwaresClient");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresCustomer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_SoftwaresCustomer");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("SoftwareId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwaresCustomer");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresSystemhouse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_SoftwaresSystemhouse");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("SoftwareId");

                    b.Property<string>("SystemhouseId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("SystemhouseId");

                    b.ToTable("SoftwaresSystemhouse");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.StorageAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_StorageAccount");

                    b.Property<string>("AzureId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("ResourceGroupId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ResourceGroupId");

                    b.ToTable("StorageAccount");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Storages.StorageEntryPoint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_StorageEntryPoint");

                    b.Property<string>("BlobContainerName");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsCSDP");

                    b.Property<string>("Location");

                    b.Property<string>("ResourceGrpName");

                    b.Property<string>("Status");

                    b.Property<string>("StorageAccount");

                    b.Property<string>("StorageAccountType");

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("StorageEntryPoint");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Subnet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Subnet");

                    b.Property<string>("AddressRange");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<string>("VirtualNetworkId");

                    b.HasKey("Id");

                    b.HasIndex("VirtualNetworkId");

                    b.ToTable("Subnet");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Subscription", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Subscription");

                    b.Property<string>("AzureId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Systemhouse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Systemhouse");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deletable");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Systemhouse");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Task", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Task");

                    b.Property<string>("BlockFilePath");

                    b.Property<bool>("CheckVersionNr");

                    b.Property<string>("CommandLine");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionShort");

                    b.Property<int>("EstimatedExecutionTime");

                    b.Property<string>("ExePath");

                    b.Property<string>("ExecutionContext");

                    b.Property<string>("ExecutionFileId");

                    b.Property<string>("InstallationType");

                    b.Property<string>("Name");

                    b.Property<bool>("RestartRequired");

                    b.Property<string>("RunningContext");

                    b.Property<string>("SuccessValue");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<bool>("UseShellExecute");

                    b.Property<string>("VersionNr");

                    b.Property<string>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionFileId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Token", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Token");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Hash");

                    b.Property<DateTime>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_User");

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CustomerId");

                    b.Property<bool>("Deletable");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SystemhouseId")
                        .IsRequired();

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("SystemhouseId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserCustomer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCustomer");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserForgotPassword", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_UserForgotPassword");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<string>("ApproverIpAddress")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatorIpAddress")
                        .HasMaxLength(64);

                    b.Property<Guid>("RequestGuid");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserForgotPassword");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_UserRole");

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserSubscription", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscription");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.VendorModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_VendorModel");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("ModelFamily");

                    b.Property<string>("ModelType");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("VendorModel");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.VirtualMachine", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_VirtualMachine");

                    b.Property<string>("AdminUserName");

                    b.Property<string>("AdminUserPassword");

                    b.Property<string>("AzureId");

                    b.Property<string>("BaseId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrentCustomerId");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("LocalIp");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("OperatingSystem");

                    b.Property<string>("Status");

                    b.Property<string>("Subnet");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.ToTable("VirtualMachine");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.VirtualNetwork", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_VirtualNetwork");

                    b.Property<string>("AddressRange");

                    b.Property<string>("AzureId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Dns");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("VirtualNetwork");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Vpn", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Vpn");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("LocalAddressRange");

                    b.Property<string>("LocalPublicIp");

                    b.Property<string>("Name");

                    b.Property<string>("SharedKey");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VirtualNetwork");

                    b.Property<string>("VirtualPublicIp");

                    b.HasKey("Id");

                    b.ToTable("Vpn");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.WMIInvenotryCmds", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_WMIInventoryCmds");

                    b.Property<string>("ClientId");

                    b.Property<string>("Command");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("WMIInvenotryCmds");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Win10Version", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Win10Version");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("RuleId");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("Win10Version");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Workflow", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_Workflow");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.HardwareModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PK_HardwareModel");

                    b.Property<string>("BIOSModelId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DriverId");

                    b.Property<string>("ModelFamily");

                    b.Property<string>("ModelType");

                    b.Property<string>("Name");

                    b.Property<string>("OSModelId");

                    b.Property<DateTime>("ProductionEnd");

                    b.Property<DateTime>("ProductionStart");

                    b.Property<string>("UpdatedByUserId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Vendor");

                    b.HasKey("Id");

                    b.HasIndex("BIOSModelId");

                    b.HasIndex("DriverId");

                    b.HasIndex("OSModelId");

                    b.ToTable("HardwareModel");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.AssetClass", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ActivityLog", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AdvancedProperty", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Base", "Base")
                        .WithMany("Properties")
                        .HasForeignKey("BaseId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Architecture", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule")
                        .WithMany("Architecture")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AssetMgmt.AssetModel", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.AssetClass", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.VendorModel", "VendorModel")
                        .WithMany()
                        .HasForeignKey("VendorModelId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AssetType", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Attachment", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.AzureBlobStorage", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ResourceGroup", "RessourceGroup")
                        .WithMany()
                        .HasForeignKey("RessourceGroupId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.StorageAccount", "StorageAccount")
                        .WithMany()
                        .HasForeignKey("StorageAccountId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.BIOSModel", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "ReadMe")
                        .WithMany()
                        .HasForeignKey("ReadMeId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Base", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ResourceGroup", "ResourceGroup")
                        .WithMany()
                        .HasForeignKey("ResourceGroupId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.StorageAccount", "StorageAccount")
                        .WithMany()
                        .HasForeignKey("StorageAccountId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.VirtualNetwork", "VirtualNetwork")
                        .WithMany()
                        .HasForeignKey("VirtualNetworkId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Vpn", "Vpn")
                        .WithMany()
                        .HasForeignKey("VpnId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Bios", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.BiosSettings", "BiosSettings")
                        .WithMany()
                        .HasForeignKey("BiosSettingsId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Client", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Base", "Base")
                        .WithMany("Clients")
                        .HasForeignKey("BaseId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Bios", "Bios")
                        .WithMany()
                        .HasForeignKey("BiosId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Hardware", "Hardware")
                        .WithMany()
                        .HasForeignKey("HardwareId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.NetworkConfiguration", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.OrganizationalUnit", "OrganizationalUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationalUnitId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.OS", "Os")
                        .WithMany()
                        .HasForeignKey("OsId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientClientProperty", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ClientProperty", "ClientProperty")
                        .WithMany()
                        .HasForeignKey("ClientPropertyId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientOption", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany("AssignedOptions")
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ScriptVersion", "DeviceOption")
                        .WithMany()
                        .HasForeignKey("DeviceOptionId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientParameter", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientProperty", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientSoftware", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany("AssignedSoftware")
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.CustomerSoftware", "CustomerSoftware")
                        .WithMany()
                        .HasForeignKey("CustomerSoftwareId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Software")
                        .WithMany("AssignedClients")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ClientTask", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany("Tasks")
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CloudEntryPoint", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("CloudEntryPoints")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Company", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("Companies")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Person", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Location", "Headquarter")
                        .WithMany()
                        .HasForeignKey("HeadquarterId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Customer", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "IconLeft")
                        .WithMany()
                        .HasForeignKey("IconLeftId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "IconRight")
                        .WithMany()
                        .HasForeignKey("IconRightId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Company", "MainCompany")
                        .WithMany()
                        .HasForeignKey("MainCompanyId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Systemhouse", "Systemhouse")
                        .WithMany("Customer")
                        .HasForeignKey("SystemhouseId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CustomerSoftware", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.CustomerSoftwareStream")
                        .WithMany("StreamMembers")
                        .HasForeignKey("CustomerSoftwareStreamId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule", "RuleApplicability")
                        .WithMany()
                        .HasForeignKey("RuleApplicabilityId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule", "RuleDetection")
                        .WithMany()
                        .HasForeignKey("RuleDetectionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskInstall")
                        .WithMany()
                        .HasForeignKey("TaskInstallId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskUninstall")
                        .WithMany()
                        .HasForeignKey("TaskUninstallId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskUpdate")
                        .WithMany()
                        .HasForeignKey("TaskUpdateId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.CustomerSoftwareStream", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Person", "ApplicationOwner")
                        .WithMany()
                        .HasForeignKey("ApplicationOwnerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer")
                        .WithMany("CustomerSoftwareStreams")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ReleasePlan", "ReleasePlan")
                        .WithMany()
                        .HasForeignKey("ReleasePlanId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.DNS", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Domain")
                        .WithMany("DNS")
                        .HasForeignKey("DomainId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Default", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("Defaults")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Disk", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.VirtualMachine")
                        .WithMany("Disks")
                        .HasForeignKey("VirtualMachineId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Domain", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Base", "Base")
                        .WithMany()
                        .HasForeignKey("BaseId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "DomainUserCSV")
                        .WithMany()
                        .HasForeignKey("DomainUserCSVId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.GroupPolicyObject", "Gpo")
                        .WithMany()
                        .HasForeignKey("GpoId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Office365ConfigurationXML")
                        .WithMany()
                        .HasForeignKey("Office365ConfigurationXMLId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.DomainUser", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Domain", "Domain")
                        .WithMany("DomainUsers")
                        .HasForeignKey("DomainId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Driver", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "ReadeMe")
                        .WithMany()
                        .HasForeignKey("ReadeMeId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ExecutionLog", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ScriptVersion", "ScriptVersion")
                        .WithMany()
                        .HasForeignKey("ScriptVersionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.VirtualMachine", "VirtualMachine")
                        .WithMany()
                        .HasForeignKey("VirtualMachineId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.File", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.ScriptVersion")
                        .WithMany("Attachments")
                        .HasForeignKey("ScriptVersionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ShopItem")
                        .WithMany("Images")
                        .HasForeignKey("ShopItemId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.VendorModel")
                        .WithMany("Files")
                        .HasForeignKey("VendorModelId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.GroupPolicyObject", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Lockscreen")
                        .WithMany()
                        .HasForeignKey("LockscreenId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Wallpaper")
                        .WithMany()
                        .HasForeignKey("WallpaperId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.HDDPartition", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client")
                        .WithMany("Partition")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Inventory", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Location", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("Locations")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.MacAddress", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client")
                        .WithMany("MacAddresses")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.NotificationEmail", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Scheduler", "Scheduler")
                        .WithMany("NotificationEmails")
                        .HasForeignKey("SchedulerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.NotificationEmailAttachment", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.NotificationEmail", "NotificationEmail")
                        .WithMany("NotificationEmailAttachments")
                        .HasForeignKey("NotificationEmailId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OSModel", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Order", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OrderShopItem", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Order", "Order")
                        .WithMany("ShopItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ShopItem", "ShopItem")
                        .WithMany()
                        .HasForeignKey("ShopItemId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OrganizationalUnit", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Domain")
                        .WithMany("OrganizationalUnits")
                        .HasForeignKey("DomainId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.OrganizationalUnit")
                        .WithMany("Children")
                        .HasForeignKey("OrganizationalUnitId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.OsVersionName", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule")
                        .WithMany("OsVersionNames")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Parameter", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.ClientOption")
                        .WithMany("Parameters")
                        .HasForeignKey("ClientOptionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer")
                        .WithMany("Parameters")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ExecutionLog")
                        .WithMany("ScriptArguments")
                        .HasForeignKey("ExecutionLogId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Person", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("Persons")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ReleasePlan", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ResourceGroup", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Rule", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.RuleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Scheduler", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Scheduler", "ParentScheduler")
                        .WithMany("ChildSchedulers")
                        .HasForeignKey("ParentSchedulerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ScriptVersion", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Script")
                        .WithMany("Versions")
                        .HasForeignKey("ScriptId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Server", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Domain", "Domain")
                        .WithMany("Servers")
                        .HasForeignKey("DomainId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.OrganizationalUnit", "OrganizationalUnit")
                        .WithMany()
                        .HasForeignKey("OrganizationalUnitId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.VirtualMachine", "VirtualMachine")
                        .WithMany()
                        .HasForeignKey("VirtualMachineId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ServerOrClient", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule")
                        .WithMany("ServerOrClient")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.ShopItemCategory", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ShopItem", "ShopItem")
                        .WithMany("Categories")
                        .HasForeignKey("ShopItemId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SmartDeploy.PreinstalledSoftware", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client")
                        .WithMany("PreinstalledSoftwares")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Software", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule", "RuleApplicability")
                        .WithMany()
                        .HasForeignKey("RuleApplicabilityId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule", "RuleDetection")
                        .WithMany()
                        .HasForeignKey("RuleDetectionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.SoftwareStream")
                        .WithMany("StreamMembers")
                        .HasForeignKey("SoftwareStreamId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskInstall")
                        .WithMany()
                        .HasForeignKey("TaskInstallId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskUninstall")
                        .WithMany()
                        .HasForeignKey("TaskUninstallId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Task", "TaskUpdate")
                        .WithMany()
                        .HasForeignKey("TaskUpdateId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwareStream", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresClient", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Software", "Software")
                        .WithMany("Clients")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresCustomer", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Software", "Software")
                        .WithMany("Customers")
                        .HasForeignKey("SoftwareId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.SoftwaresSystemhouse", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Software", "Software")
                        .WithMany("Systemhouses")
                        .HasForeignKey("SoftwareId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Systemhouse", "Systemhouse")
                        .WithMany()
                        .HasForeignKey("SystemhouseId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.StorageAccount", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.ResourceGroup", "ResourceGroup")
                        .WithMany()
                        .HasForeignKey("ResourceGroupId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Storages.StorageEntryPoint", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer")
                        .WithMany("StorageEntryPoints")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Subnet", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.VirtualNetwork", "VirtualNetwork")
                        .WithMany("Subnets")
                        .HasForeignKey("VirtualNetworkId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Subscription", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Task", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.File", "ExecutionFile")
                        .WithMany()
                        .HasForeignKey("ExecutionFileId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Token", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.User", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "DeletedByUser")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Systemhouse", "Systemhouse")
                        .WithMany()
                        .HasForeignKey("SystemhouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "UpdatedByUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserCustomer", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Customer", "Customer")
                        .WithMany("UserCustomer")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserForgotPassword", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany("UserForgotPasswords")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserRole", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.UserSubscription", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Subscription", "Subscription")
                        .WithMany("UserSubscription")
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.VirtualMachine", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Base", "Base")
                        .WithMany("VirtualMachines")
                        .HasForeignKey("BaseId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.WMIInvenotryCmds", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.Entities.Win10Version", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.Rule")
                        .WithMany("Win10Versions")
                        .HasForeignKey("RuleId");
                });

            modelBuilder.Entity("Bitstream.Data.DataContext.HardwareModel", b =>
                {
                    b.HasOne("Bitstream.Data.DataContext.Entities.BIOSModel")
                        .WithMany("ValidHardware")
                        .HasForeignKey("BIOSModelId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.Driver")
                        .WithMany("ValidModels")
                        .HasForeignKey("DriverId");

                    b.HasOne("Bitstream.Data.DataContext.Entities.OSModel")
                        .WithMany("HardwareModels")
                        .HasForeignKey("OSModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
